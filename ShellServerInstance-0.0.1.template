{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create a personal 64-bit EC2 instance running Ubuntu 12.04.1 LTS. The AMI is chosen based on the region in which the stack is run based on those listed at http://cloud-images.ubuntu.com/releases/precise/release-20121001/. SSH access is enabled via a new EC2 security group. The stack installs basic packages (including screen, emacs, git, and irssi), and pulls down configuration files and scripts.",

  "Parameters" : {
    "InstanceType" : {
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
      "Description" : "EC2 instance type (e.g. t1.micro)"
    },

    "AvailabilityZone" : {
      "Type" : "String",
      "Default" : "us-east-1e",
      "Description" : "EC2 availability zone (e.g. us-east-1e)"
    },

    "KeyName" : {
      "Type" : "String",
      "Default" : "default",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    },

    "TimeZone" : {
      "Type" : "String",
      "Default" : "US/Pacific",
      "Description" : "Time zone identifier for the instance (e.g. US/Pacific)"
    },

    "LockerBucketName" : {
      "Type" : "String",
      "Default" : "locker.danieltwc.net",
      "Description" : "Name of bucket containing private configuration files"
    },

    "DotfilesRepoURL" : {
      "Type" : "String",
      "Default" : "git://github.com/dwc/dotfiles.git",
      "Description" : "URL of Git repository containing dotfiles for $HOME"
    },

    "ScriptsRepoURL" : {
      "Type" : "String",
      "Default" : "git://github.com/dwc/scripts.git",
      "Description" : "URL of Git repository containing scripts for $HOME/bin"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-3d4ff254"
      },
      "us-west-1" : {
        "AMI" : "ami-0d153248"
      },
      "us-west-2" : {
        "AMI" : "ami-8e109ebe"
      },
      "eu-west-1" : {
        "AMI" : "ami-c1aaabb5"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-22ad1223"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-e88acaba"
      },
      "sa-east-1" : {
        "AMI" : "ami-c819c0d5"
      }
    }
  },

  "Resources" : {
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "root",
          "PolicyDocument" : { "Statement" : [ {
            "Effect" : "Allow",
            "Action" : [
              "cloudformation:DescribeStackResource",
              "s3:GetObject"
            ],
            "Resource" : "*"
          } ] }
        } ]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref" : "CfnUser" }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "ShellServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "echo '### Updating packages...' >> /tmp/cfn-init.log\n",
          "apt-get -y update >> /tmp/cfn-init.log 2>&1\n",

          "echo '### Installing CloudFormation bootstrap scripts...' >> /tmp/cfn-init.log\n",
          "apt-get -y install python-pip >> /tmp/cfn-init.log 2>&1\n",
          "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz >> /tmp/cfn-init.log\n",

          "echo '### Bootstrapping CloudFormation using AWS::CloudFormation::Init resources...' >> /tmp/cfn-init.log\n",
          "cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r ShellServerInstance",
          " --access-key ",  { "Ref" : "CfnKeys" },
          " --secret-key ", { "Fn::GetAtt": [ "CfnKeys", "SecretAccessKey" ] },
          " --region ", { "Ref" : "AWS::Region" }, " >> /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

          "echo '### Setting server time zone...' >> /tmp/cfn-init.log\n",
          "cp /usr/share/zoneinfo/", { "Ref" : "TimeZone" }, " /etc/localtime >> /tmp/cfn-init.log 2>&1\n",

          "echo '### Running the user home setup script...' >> /tmp/cfn-init.log\n",
          "sudo -i -u ubuntu /tmp/setup-user-home.sh >> /tmp/cfn-init.log 2>&1\n",

          "echo '### Sending setup complete signal...' >> /tmp/cfn-init.log\n",
          "cfn-signal -e 0 -r \"Instance setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ] ] } }
      },

      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "LockerAccessCredentials" : {
            "type" : "S3",
            "accessKeyId" : { "Ref" : "CfnKeys" },
            "secretKey" : { "Fn::GetAtt": ["CfnKeys", "SecretAccessKey"] },
            "buckets" : [ { "Ref" : "LockerBucketName" } ]
          }
        },

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "screen" : [],
                "emacs" : [],
                "git" : [],
                "irssi" : [],
                "irssi-scripts" : []
              }
            },
            "files" : {
              "/tmp/setup-user-home.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "git clone ", { "Ref" : "DotfilesRepoURL" }, "\n",
                  "mv dotfiles/.git .dotfiles.git\n",
                  "mv dotfiles/.* .\n",
                  "rmdir dotfiles\n",
                  "mv irssi-config .irssi/config\n",
                  "git clone ", { "Ref" : "ScriptsRepoURL" }, " bin\n",
                  "mkdir -p .irssi/scripts/autorun\n",
                  "mv irssi-usercount.pl .irssi/scripts/usercount.pl\n",
                  "cd .irssi/scripts/autorun\n",
                  "ln -s ../usercount.pl\n",
                  "for script in logcompress.pl topic-diff.pl trackbar.pl; do ln -s /usr/share/irssi/scripts/$script; done\n",
                  "echo \"$0 finished!\"\n"
                ] ] },
                "mode" : "000755",
                "owner" : "ubuntu",
                "group" : "ubuntu"
              },
              "/home/ubuntu/.gitconfig" : {
                "source" : { "Fn::Join" : [ "", [ "https://s3.amazonaws.com/",
                                                  { "Ref" : "LockerBucketName" }, "/.gitconfig"]]},
                "mode" : "000600",
                "owner" : "ubuntu",
                "group" : "ubuntu",
                "authentication" : "LockerAccessCredentials"
              },
              "/home/ubuntu/irssi-config" : {
                "source" : { "Fn::Join" : [ "", [ "https://s3.amazonaws.com/",
                                                  { "Ref" : "LockerBucketName" }, "/.irssi/config"]]},
                "mode" : "000600",
                "owner" : "ubuntu",
                "group" : "ubuntu",
                "authentication" : "LockerAccessCredentials"
              },
              "/home/ubuntu/irssi-usercount.pl" : {
                "source" : "http://scripts.irssi.org/scripts/usercount.pl",
                "mode" : "000600",
                "owner" : "ubuntu",
                "group" : "ubuntu"
              }
            }
          }
        }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ShellServerInstance",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "300"
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "ID of the newly created EC2 instance",
      "Value" : { "Ref" : "ShellServerInstance" }
    },
    "AvailabilityZone" : {
      "Description" : "Availability zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "ShellServerInstance", "AvailabilityZone" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "ShellServerInstance", "PublicIp" ] }
    }
  }
}
